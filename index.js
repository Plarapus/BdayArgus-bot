const TelegramBot = require('node-telegram-bot-api');
const moment = require('moment');
const fs = require('fs');
const csv = require('csv-parser');

// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const token = '7544574662:AAEqQ0srXWqLpwMIz-kb21JGZZ52z5P6t8k';
const bot = new TelegramBot(token, { polling: true });

// –ù–∞–±–æ—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
const users = new Set();
// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç —Ä–æ–∂–¥–µ–Ω–∏–π
let birthdays = [];

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ birthdays.csv
 */
function loadBirthdays() {
  birthdays = [];
  fs.createReadStream('birthdays.csv')
    .pipe(csv())
    .on('data', row => {
      // –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: name=–ò–º—è, birthday=DD-MM
      if (row.name && row.birthday && /^\d{1,2}-\d{1,2}$/.test(row.birthday)) {
        birthdays.push({ name: row.name.trim(), birthday: row.birthday.trim() });
      }
    })
    .on('end', () => {
      console.log('–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω:', birthdays.length, '–∑–∞–ø–∏—Å–µ–π');
    })
    .on('error', err => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV:', err);
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 */
function checkBirthdays() {
  if (users.size === 0 || birthdays.length === 0) return;

  const today = moment();
  const todayKey = today.format('DD-MM');
  const tomorrowKey = today.clone().add(1, 'day').format('DD-MM');

  users.forEach(chatId => {
    birthdays.forEach(({ name, birthday }) => {
      if (birthday === todayKey) {
        bot.sendMessage(chatId, `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É *${name}*!`, { parse_mode: 'Markdown' });
      } else if (birthday === tomorrowKey) {
        bot.sendMessage(chatId, `üéÅ –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É *${name}*!`, { parse_mode: 'Markdown' });
      }
    });
  });
}

/**
 * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ 9:00
 */
function scheduleDailyCheck() {
  const now = moment();
  let nextCheck = moment().hour(9).minute(0).second(0);
  if (now.isAfter(nextCheck)) {
    nextCheck.add(1, 'day');
  }

  const delay = nextCheck.diff(now);
  setTimeout(() => {
    checkBirthdays();
    // –¥–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    setInterval(checkBirthdays, 24 * 60 * 60 * 1000);
  }, delay);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, msg => {
  users.add(msg.chat.id);
  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.', { reply_markup: { remove_keyboard: true } });
});

bot.onText(/\/reload/, msg => {
  if (!users.has(msg.chat.id)) return;
  loadBirthdays();
  bot.sendMessage(msg.chat.id, '‚úÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω.');
});

bot.onText(/\/list/, msg => {
  if (!users.has(msg.chat.id)) return;

  const now = moment();
  const upcoming = birthdays
    .map(({ name, birthday }) => {
      const [day, month] = birthday.split('-').map(Number);
      let date = moment({ year: now.year(), month: month - 1, day });
      if (date.isBefore(now, 'day')) date.add(1, 'year');
      return { name, date };
    })
    .filter(({ date }) => date.diff(now, 'days') <= 7)
    .sort((a, b) => a.date.diff(b.date));

  if (upcoming.length === 0) {
    bot.sendMessage(msg.chat.id, '–ù–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π.');
  } else {
    const lines = upcoming.map(({ name, date }) => `‚Ä¢ ${date.format('DD MMMM')} ‚Äî ${name}`);
    const text = ['üìÖ *–ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:*', ...lines].join('\n');
    bot.sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' });
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadBirthdays();
scheduleDailyCheck();

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');