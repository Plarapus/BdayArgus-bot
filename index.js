const TelegramBot = require('node-telegram-bot-api');
const moment = require('moment');
const fs = require('fs');
const csv = require('csv-parser');

// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const token = process.env.TELEGRAM_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –ù–∞–±–æ—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
const users = new Set();
// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç —Ä–æ–∂–¥–µ–Ω–∏–π
let birthdays = [];

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ birthdays.csv
 */
function loadBirthdays() {
  birthdays = [];
  fs.createReadStream('birthdays.csv')
    .pipe(csv())
    .on('data', row => {
      if (row.name && row.birthday && /^\d{1,2}-\d{1,2}$/.test(row.birthday)) {
        birthdays.push({ name: row.name.trim(), birthday: row.birthday.trim() });
      }
    })
    .on('end', () => {
      console.log('–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω:', birthdays.length, '–∑–∞–ø–∏—Å–µ–π');
    })
    .on('error', err => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV:', err);
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 */
function checkBirthdays() {
  if (users.size === 0 || birthdays.length === 0) return;

  const today = moment();
  const todayKey = today.format('DD-MM');
  const tomorrowKey = today.clone().add(1, 'day').format('DD-MM');

  users.forEach(chatId => {
    birthdays.forEach(({ name, birthday }) => {
      if (birthday === todayKey) {
        bot.sendMessage(chatId, `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É *${name}*!`, { parse_mode: 'Markdown' });
      } else if (birthday === tomorrowKey) {
        bot.sendMessage(chatId, `üéÅ –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É *${name}*!`, { parse_mode: 'Markdown' });
      }
    });
  });
}

/**
 * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ 9:00
 */
function scheduleDailyCheck() {
  const now = moment();
  let nextCheck = moment().hour(9).minute(0).second(0);
  if (now.isAfter(nextCheck)) {
    nextCheck.add(1, 'day');
  }

  const delay = nextCheck.diff(now);
  setTimeout(() => {
    checkBirthdays();
    setInterval(checkBirthdays, 24 * 60 * 60 * 1000);
  }, delay);
}

// –ö–æ–º–∞–Ω–¥—ã
bot.onText(/\/start/, msg => {
  users.add(msg.chat.id);
  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.', { reply_markup: { remove_keyboard: true } });
});

bot.onText(/\/reload/, msg => {
  if (!users.has(msg.chat.id)) return;
  loadBirthdays();
  bot.sendMessage(msg.chat.id, '‚úÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω.');
});

bot.onText(/\/list/, msg => {
  if (!users.has(msg.chat.id)) return;

  const now = moment();
  const upcoming = birthdays
    .map(({ name, birthday }) => {
      const [day, month] = birthday.split('-').map(Number);
      let date = moment({ year: now.year(), month: month - 1, day });
      if (date.isBefore(now, 'day')) date.add(1, 'year');
      return { name, date };
    })
    .filter(({ date }) => date.diff(now, 'days') <= 7)
    .sort((a, b) => a.date.diff(b.date));

  if (upcoming.length === 0) {
    bot.sendMessage(msg.chat.id, '–ù–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π.');
  } else {
    const lines = upcoming.map(({ name, date }) => `‚Ä¢ ${date.format('DD MMMM')} ‚Äî ${name}`);
    const text = ['üìÖ *–ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:*', ...lines].join('\n');
    bot.sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' });
  }
});

bot.onText(/\/add (.+) (\d{1,2}-\d{1,2})/, (msg, match) => {
  const chatId = msg.chat.id;
  if (!users.has(chatId)) return;

  const name = match[1].trim();
  const birthday = match[2].trim();

  if (!/^\d{1,2}-\d{1,2}$/.test(birthday)) {
    return bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π DD-MM, –Ω–∞–ø—Ä–∏–º–µ—Ä: 23-05');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
  const isDuplicate = birthdays.some(entry =>
    entry.name.toLowerCase() === name.toLowerCase() &&
    entry.birthday === birthday
  );

  if (isDuplicate) {
    return bot.sendMessage(chatId, `‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å –∏–º–µ–Ω–µ–º "${name}" –∏ –¥–∞—Ç–æ–π "${birthday}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
  }

  birthdays.push({ name, birthday });
  const row = `\n${name},${birthday}`;
  fs.appendFile('birthdays.csv', row, err => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª:', err);
      return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.');
    }
    bot.sendMessage(chatId, `‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è *${name}* (${birthday}) –¥–æ–±–∞–≤–ª–µ–Ω.`, { parse_mode: 'Markdown' });
  });
});

bot.onText(/\/help/, msg => {
  const helpText = `
üìå *–ö–æ–º–∞–Ω–¥—ã:*
/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/reload ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
/list ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ –î–† (7 –¥–Ω–µ–π)
/add –ò–º—è –î–î-–ú–ú ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
/help ‚Äî –ø–æ–º–æ—â—å
  `;
  bot.sendMessage(msg.chat.id, helpText, { parse_mode: 'Markdown' });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadBirthdays();
scheduleDailyCheck();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');
